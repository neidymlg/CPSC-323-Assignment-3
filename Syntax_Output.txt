================================================================================
			Token:SEPARATOR	Lexeme:$$
================================================================================
<Rat25S> -> $$ <Opt Function Definitions> $$ <Opt Declaration List> $$ <Statement List>$$
<Rat25S> -> $$ <Opt Function Definitions>
<Opt Function Definitions> -> <Empty>
================================================================================
			Token:SEPARATOR	Lexeme:$$
================================================================================
$$ <Opt Declaration List>
<Opt Declaration List> -> <Declaration List>
<Declaration List> -> <Declaration> ; <D>
<Declaration> -> <Qualifier> <IDs>
================================================================================
			Token:KEYWORD	Lexeme:integer
================================================================================
<Qualifier> -> integer | boolean | real
<IDs> -> <Identifier> <id>
================================================================================
			Token:IDENTIFIER	Lexeme:i
================================================================================
<Identifier> -> Identifier
================================================================================
			Token:SEPARATOR	Lexeme:,
================================================================================
<id> -> , <IDs>
<IDs> -> <Identifier> <id>
================================================================================
			Token:IDENTIFIER	Lexeme:max
================================================================================
<Identifier> -> Identifier
================================================================================
			Token:SEPARATOR	Lexeme:,
================================================================================
<id> -> , <IDs>
<IDs> -> <Identifier> <id>
================================================================================
			Token:IDENTIFIER	Lexeme:sum
================================================================================
<Identifier> -> Identifier
<id> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:;
================================================================================
; <D>
<D> -> <Declaration List>
<Declaration List> -> <Declaration> ; <D>
<Declaration> -> <Qualifier> <IDs>
================================================================================
			Token:KEYWORD	Lexeme:boolean
================================================================================
<Qualifier> -> integer | boolean | real
<IDs> -> <Identifier> <id>
================================================================================
			Token:IDENTIFIER	Lexeme:bool
================================================================================
<Identifier> -> Identifier
================================================================================
			Token:SEPARATOR	Lexeme:,
================================================================================
<id> -> , <IDs>
<IDs> -> <Identifier> <id>
================================================================================
			Token:IDENTIFIER	Lexeme:bool2
================================================================================
<Identifier> -> Identifier
================================================================================
			Token:SEPARATOR	Lexeme:,
================================================================================
<id> -> , <IDs>
<IDs> -> <Identifier> <id>
================================================================================
			Token:IDENTIFIER	Lexeme:bool3
================================================================================
<Identifier> -> Identifier
================================================================================
			Token:SEPARATOR	Lexeme:,
================================================================================
<id> -> , <IDs>
<IDs> -> <Identifier> <id>
================================================================================
			Token:IDENTIFIER	Lexeme:bool4
================================================================================
<Identifier> -> Identifier
<id> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:;
================================================================================
; <D>
<D> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:$$
================================================================================
$$ <Statement List>
<Statement List> -> <Statement> <S>
================================================================================
			Token:IDENTIFIER	Lexeme:i
================================================================================
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
<Assign> -> <Identifier>
================================================================================
			Token:OPERATOR	Lexeme:=
================================================================================
= <Expression> ;
<Expression> -> <Term> <E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:INTEGER	Lexeme:10
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
<E> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:;
================================================================================
;
End of Assign
<S> -> <Statement List>
<Statement List> -> <Statement> <S>
================================================================================
			Token:IDENTIFIER	Lexeme:max
================================================================================
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
<Assign> -> <Identifier>
================================================================================
			Token:OPERATOR	Lexeme:=
================================================================================
= <Expression> ;
<Expression> -> <Term> <E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:INTEGER	Lexeme:0
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
<E> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:;
================================================================================
;
End of Assign
<S> -> <Statement List>
<Statement List> -> <Statement> <S>
================================================================================
			Token:IDENTIFIER	Lexeme:sum
================================================================================
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
<Assign> -> <Identifier>
================================================================================
			Token:OPERATOR	Lexeme:=
================================================================================
= <Expression> ;
<Expression> -> <Term> <E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:INTEGER	Lexeme:3
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
<E> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:;
================================================================================
;
End of Assign
<S> -> <Statement List>
<Statement List> -> <Statement> <S>
================================================================================
			Token:KEYWORD	Lexeme:while
================================================================================
<Statement> -> <While>
<While> -> while ( <Condition> ) <Statement> endwhile
<While> -> while
================================================================================
			Token:SEPARATOR	Lexeme:(
================================================================================
( <Condition>
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:IDENTIFIER	Lexeme:i
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
<E> -> ε
================================================================================
			Token:OPERATOR	Lexeme:<
================================================================================
<Relop> -> == | != | > | < | <= | =>
<Expression> -> <Term> <E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:IDENTIFIER	Lexeme:max
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
<E> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:)
================================================================================
) <Statement>
================================================================================
			Token:SEPARATOR	Lexeme:{
================================================================================
<Statement> -> <Compound>
<Compound> -> { <Statement List> }
<Compound> -> { <Statement List>
<Statement List> -> <Statement> <S>
================================================================================
			Token:IDENTIFIER	Lexeme:sum
================================================================================
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
<Assign> -> <Identifier>
================================================================================
			Token:OPERATOR	Lexeme:=
================================================================================
= <Expression> ;
<Expression> -> <Term> <E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:IDENTIFIER	Lexeme:sum
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
================================================================================
			Token:OPERATOR	Lexeme:+
================================================================================
<E> -> + <Term> <E> | - <Term><E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:IDENTIFIER	Lexeme:i
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
<E> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:;
================================================================================
;
End of Assign
<S> -> <Statement List>
<Statement List> -> <Statement> <S>
================================================================================
			Token:IDENTIFIER	Lexeme:i
================================================================================
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
<Assign> -> <Identifier>
================================================================================
			Token:OPERATOR	Lexeme:=
================================================================================
= <Expression> ;
<Expression> -> <Term> <E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:IDENTIFIER	Lexeme:i
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
================================================================================
			Token:OPERATOR	Lexeme:+
================================================================================
<E> -> + <Term> <E> | - <Term><E>
<Term> -> <Factor> <T>
<Factor> -> <Primary>
================================================================================
			Token:INTEGER	Lexeme:1
================================================================================
<Primary> -> <Identifier> | <Integer> | <Identifier> | true, false
<T> -> ε
<E> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:;
================================================================================
;
End of Assign
<S> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:}
================================================================================
}
End of Compound
================================================================================
			Token:KEYWORD	Lexeme:endwhile
================================================================================
endwhile
<S> -> ε
================================================================================
			Token:SEPARATOR	Lexeme:$$
================================================================================
$$
Parse complete: Correct syntax
